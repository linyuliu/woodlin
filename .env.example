# ====================================================================================
# Woodlin 多租户管理系统 - 环境配置文件
# 
# 使用说明:
# 1. 复制此文件为 .env: cp .env.example .env
# 2. 根据实际环境修改配置项
# 3. 使用 docker-compose up -d 启动服务
# 
# 注意事项:
# - 生产环境必须修改所有密码和敏感信息
# - 建议使用强密码 (至少 16 位，包含大小写字母、数字、特殊字符)
# - .env 文件不应提交到版本控制系统 (已添加到 .gitignore)
# ====================================================================================

# ====================================================================================
# 数据库配置 (MySQL 8.0)
# ====================================================================================

# 数据库名称
DATABASE_NAME=woodlin

# 数据库用户名 (非 root 用户，用于应用连接)
DATABASE_USERNAME=woodlin

# 数据库密码 (生产环境必须修改)
# 建议: 使用复杂密码，包含大小写字母、数字、特殊字符
DATABASE_PASSWORD=123456

# 数据库端口 (宿主机映射端口)
DATABASE_PORT=3306

# ====================================================================================
# Redis 配置 (Redis 7.x)
# ====================================================================================

# Redis 密码 (生产环境必须设置)
REDIS_PASSWORD=123456

# Redis 端口 (宿主机映射端口)
REDIS_PORT=6379

# Redis 数据库索引 (0-15)
REDIS_DATABASE=0

# Redis 连接超时时间
REDIS_TIMEOUT=10s

# ====================================================================================
# 应用服务器配置
# ====================================================================================

# 应用服务端口 (后端 API 端口)
SERVER_PORT=8080

# Nginx 前端服务端口 (只在使用 --profile frontend 时有效)
NGINX_PORT=3000

# ====================================================================================
# Spring 配置
# ====================================================================================

# Spring 激活的 Profile
# 可选值: dev (开发环境) / test (测试环境) / prod (生产环境)
SPRING_PROFILES_ACTIVE=prod

# ====================================================================================
# 容器资源限制配置 (可选)
# 
# 说明: 这些配置用于在 docker-compose.yml 中限制容器资源使用
# 格式:
#   - CPU: 核心数，如 0.5, 1.0, 2.0
#   - 内存: 带单位，如 512M, 1G, 2G
# ====================================================================================

# MySQL 资源限制
MYSQL_MAX_CPU=2.0
MYSQL_MAX_MEMORY=1G
MYSQL_MIN_CPU=0.5
MYSQL_MIN_MEMORY=512M

# Redis 资源限制
REDIS_MAX_CPU=1.0
REDIS_MAX_MEMORY=768M
REDIS_MIN_CPU=0.25
REDIS_MIN_MEMORY=256M

# 应用资源限制
APP_MAX_CPU=2.0
APP_MAX_MEMORY=2G
APP_MIN_CPU=1.0
APP_MIN_MEMORY=1G

# Nginx 资源限制
NGINX_MAX_CPU=0.5
NGINX_MAX_MEMORY=256M
NGINX_MIN_CPU=0.1
NGINX_MIN_MEMORY=64M

# ====================================================================================
# 系统限制配置 (ulimit)
# 
# 说明: 这些配置影响容器内进程的系统资源限制
# 注意: 宿主机也需要配置相应的限制，否则容器限制无法生效
# ====================================================================================

# 最大打开文件数 (文件描述符)
# 说明: 影响可以同时打开的文件、socket 连接等数量
# 推荐值: 65536 (中小型应用) / 1048576 (大型应用)
ULIMIT_NOFILE_SOFT=65536
ULIMIT_NOFILE_HARD=65536

# 最大进程/线程数
# 说明: 影响可以创建的进程和线程数量
# 推荐值: 65536 (中小型应用) / 131072 (大型应用)
ULIMIT_NPROC_SOFT=65536
ULIMIT_NPROC_HARD=65536

# ====================================================================================
# 宿主机系统优化建议
# 
# 为了让容器的 ulimit 配置生效，需要配置宿主机系统限制:
# 
# 1. 编辑 /etc/security/limits.conf，添加以下内容:
#    * soft nofile 65536
#    * hard nofile 65536
#    * soft nproc 65536
#    * hard nproc 65536
#    root soft nofile 65536
#    root hard nofile 65536
#    root soft nproc 65536
#    root hard nproc 65536
# 
# 2. 编辑 /etc/sysctl.conf，添加以下内容:
#    # 最大文件句柄数
#    fs.file-max = 2097152
#    fs.nr_open = 2097152
#    
#    # TCP 连接队列
#    net.core.somaxconn = 32768
#    net.ipv4.tcp_max_syn_backlog = 8192
#    
#    # TIME_WAIT 优化
#    net.ipv4.tcp_tw_reuse = 1
#    net.ipv4.tcp_fin_timeout = 30
#    
#    # 本地端口范围
#    net.ipv4.ip_local_port_range = 10000 65535
#    
#    # 虚拟内存
#    vm.swappiness = 10
#    vm.max_map_count = 262144
# 
# 3. 使配置生效:
#    sysctl -p
#    
# 4. 重启 Docker 服务:
#    systemctl restart docker
# 
# 5. 验证配置:
#    ulimit -a
#    sysctl -a | grep -E 'file-max|nr_open|somaxconn'
# ====================================================================================

# ====================================================================================
# 其他配置项
# ====================================================================================

# Docker Compose 项目名称 (可选)
# 说明: 影响容器名称、网络名称、卷名称的前缀
# 默认: 使用目录名作为项目名
# COMPOSE_PROJECT_NAME=woodlin

# Docker Compose 配置文件 (可选)
# 说明: 指定使用的 compose 文件
# 默认: docker-compose.yml
# COMPOSE_FILE=docker-compose.yml

# Docker Compose Profiles (可选)
# 说明: 启用的服务 profile
# 示例: COMPOSE_PROFILES=frontend (启动前端 Nginx 服务)
# COMPOSE_PROFILES=frontend
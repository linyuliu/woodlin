# ====================================================================================
# Woodlin 多租户管理系统 - Docker Compose 配置
#
# 本配置文件定义了完整的 Woodlin 系统运行环境，包括:
# - MySQL 8.0 数据库
# - Redis 7.x 缓存
# - Woodlin 后端应用
# - Nginx 前端服务 (可选)
#
# 使用方法:
# 1. 复制 .env.example 为 .env 并修改配置
# 2. 执行 docker-compose up -d 启动所有服务
# 3. 访问 http://localhost:8080/api 查看后端 API
# 4. 使用 docker-compose logs -f 查看日志
# 5. 使用 docker-compose down 停止服务
# ====================================================================================

services:
  # ====================================================================================
  # MySQL 数据库服务
  #
  # 用途: 存储系统核心数据 (用户、角色、权限、租户等)
  # 版本: MySQL 8.0 (支持更好的性能和安全特性)
  # ====================================================================================
  mysql:
    image: mysql:8.0
    container_name: woodlin-mysql

    # 重启策略: 除非手动停止，否则总是重启
    restart: unless-stopped

    # ====================================================================================
    # 环境变量配置
    #
    # MYSQL_ROOT_PASSWORD: root 用户密码 (生产环境必须修改)
    # MYSQL_DATABASE: 默认创建的数据库名称
    # MYSQL_USER: 创建的普通用户 (会自动授权访问 MYSQL_DATABASE)
    # MYSQL_PASSWORD: 普通用户密码
    # TZ: 时区设置
    # ====================================================================================
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD:-123456}
      MYSQL_DATABASE: ${DATABASE_NAME:-woodlin}
      MYSQL_USER: ${DATABASE_USERNAME:-woodlin}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD:-123456}
      TZ: Asia/Shanghai

    # ====================================================================================
    # MySQL 启动参数
    #
    # --default-authentication-plugin: 使用传统密码认证 (兼容性更好)
    # --character-set-server: 服务器字符集 utf8mb4 (支持 emoji 等)
    # --collation-server: 排序规则 utf8mb4_unicode_ci (不区分大小写)
    # --lower_case_table_names: 表名不区分大小写 (适合跨平台)
    # --max_connections: 最大连接数 (根据实际负载调整)
    # --max_allowed_packet: 最大数据包大小 64MB (支持大字段)
    # --default-time-zone: 数据库默认时区
    # --sql_mode: SQL 模式 (移除严格模式中的部分限制)
    # --innodb_buffer_pool_size: InnoDB 缓冲池大小 (建议设置为内存的 50-80%)
    # --innodb_log_file_size: InnoDB 日志文件大小
    # --innodb_flush_log_at_trx_commit: 事务日志刷盘策略 (2=每秒刷盘，性能更好)
    # --slow_query_log: 启用慢查询日志
    # --slow_query_log_file: 慢查询日志文件
    # --long_query_time: 慢查询阈值 (秒)
    # ====================================================================================
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --lower_case_table_names=1
      - --max_connections=500
      - --max_allowed_packet=64M
      - --default-time-zone=+08:00
      - --sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
      - --innodb_buffer_pool_size=256M
      - --innodb_log_file_size=128M
      - --innodb_flush_log_at_trx_commit=2
      - --slow_query_log=1
      - --slow_query_log_file=/var/lib/mysql/slow.log
      - --long_query_time=2

    # 端口映射: 宿主机端口:容器端口
    ports:
      - "${DATABASE_PORT:-3306}:3306"

    # ====================================================================================
    # 数据卷挂载
    #
    # mysql_data: 数据持久化 (数据库文件)
    # ./sql: 初始化 SQL 脚本目录 (容器启动时自动执行)
    # ====================================================================================
    volumes:
      - mysql_data:/var/lib/mysql
      - ./sql:/docker-entrypoint-initdb.d:ro

    # 网络配置
    networks:
      - woodlin-network

    # ====================================================================================
    # 健康检查配置
    #
    # test: 健康检查命令 (使用 mysqladmin ping)
    # interval: 检查间隔 30 秒
    # timeout: 超时时间 10 秒
    # retries: 失败重试次数 10 次
    # start_period: 启动等待时间 40 秒 (MySQL 启动较慢)
    # ====================================================================================
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DATABASE_PASSWORD:-123456}"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 40s

    # ====================================================================================
    # 系统资源限制
    #
    # ulimits: 文件描述符等系统限制
    #   - nofile: 最大打开文件数 (软限制 / 硬限制)
    #     MySQL 需要较多的文件描述符来处理连接和表文件
    #
    # deploy.resources: 容器资源限制 (Docker Swarm / Compose v3.8+)
    #   - limits: 资源上限
    #     - cpus: CPU 核心数限制
    #     - memory: 内存上限
    #   - reservations: 资源预留 (保证最小资源)
    #     - cpus: 预留 CPU
    #     - memory: 预留内存
    # ====================================================================================
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ====================================================================================
  # Redis 缓存服务
  #
  # 用途: 缓存热点数据、Session 管理、分布式锁等
  # 版本: Redis 7.x Alpine (轻量级镜像)
  # ====================================================================================
  redis:
    image: redis:7-alpine
    container_name: woodlin-redis
    restart: unless-stopped

    # ====================================================================================
    # Redis 启动参数
    #
    # --requirepass: 设置密码 (生产环境必须设置)
    # --appendonly yes: 启用 AOF 持久化 (更安全)
    # --maxmemory: 最大内存限制 (超出后会根据淘汰策略删除数据)
    # --maxmemory-policy: 内存淘汰策略
    #   - allkeys-lru: 从所有 key 中淘汰最近最少使用的 (推荐)
    #   - volatile-lru: 从设置了过期时间的 key 中淘汰
    # --save: RDB 持久化策略
    #   - 900 1: 900 秒内至少 1 次修改则保存
    #   - 300 10: 300 秒内至少 10 次修改则保存
    #   - 60 10000: 60 秒内至少 10000 次修改则保存
    # --tcp-backlog: TCP 连接队列大小 (需要配合系统 somaxconn)
    # --timeout: 客户端空闲超时时间 (0=永不超时)
    # --tcp-keepalive: TCP keepalive 间隔 (秒)
    # ====================================================================================
    command:
      - redis-server
      - --requirepass
      - ${REDIS_PASSWORD:-123456}
      - --appendonly
      - "yes"
      - --maxmemory
      - "512mb"
      - --maxmemory-policy
      - allkeys-lru
      - --save
      - "900 1"
      - --save
      - "300 10"
      - --save
      - "60 10000"
      - --tcp-backlog
      - "511"
      - --timeout
      - "300"
      - --tcp-keepalive
      - "60"

    ports:
      - "${REDIS_PORT:-6379}:6379"

    # ====================================================================================
    # 数据卷挂载
    #
    # redis_data: Redis 数据持久化目录 (AOF 和 RDB 文件)
    # ====================================================================================
    volumes:
      - redis_data:/data

    networks:
      - woodlin-network

    environment:
      TZ: Asia/Shanghai

    # ====================================================================================
    # 健康检查配置
    #
    # 使用 redis-cli ping 检查服务是否正常
    # ====================================================================================
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-123456}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s

    # ====================================================================================
    # 系统资源限制
    #
    # ulimits: 文件描述符等系统限制
    #   - nofile: Redis 需要较多文件描述符处理大量连接
    # ====================================================================================
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 768M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ====================================================================================
  # Woodlin 后端应用服务
  #
  # 用途: Spring Boot 应用，提供 RESTful API 服务
  # 技术栈: Spring Boot 3.4.1 + Java 17 + MyBatis-Plus + Sa-Token
  # ====================================================================================
  woodlin-app:
    # 使用自定义 Dockerfile 构建镜像
    build:
      context: .
      dockerfile: scripts/Dockerfile
      # 构建参数 (可选)
      args:
        - MAVEN_OPTS=-Dmaven.repo.local=/root/.m2/repository

    container_name: woodlin-app
    restart: unless-stopped

    # ====================================================================================
    # 服务依赖
    #
    # depends_on: 定义服务启动顺序和健康检查依赖
    #   - condition: service_healthy: 等待依赖服务健康检查通过后才启动
    # ====================================================================================
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy

    ports:
      - "${SERVER_PORT:-8080}:8080"

    # ====================================================================================
    # 环境变量配置
    #
    # 数据库配置:
    #   - DATABASE_URL: JDBC 连接字符串
    #   - DATABASE_USERNAME: 数据库用户名
    #   - DATABASE_PASSWORD: 数据库密码
    #   - DATABASE_DRIVER: 数据库驱动类
    #
    # Redis 配置:
    #   - REDIS_HOST: Redis 主机地址
    #   - REDIS_PORT: Redis 端口
    #   - REDIS_PASSWORD: Redis 密码
    #   - REDIS_DATABASE: Redis 数据库索引
    #   - REDIS_TIMEOUT: Redis 连接超时时间
    #   - REDISSON_ADDRESS: Redisson 连接地址
    #   - REDISSON_PASSWORD: Redisson 密码
    #
    # 服务器配置:
    #   - SERVER_PORT: 应用端口
    #   - SERVER_CONTEXT_PATH: 应用上下文路径
    #
    # Spring 配置:
    #   - SPRING_PROFILES_ACTIVE: 激活的 Spring Profile (dev/test/prod)
    #
    # JVM 配置:
    #   - JAVA_OPTS: JVM 启动参数 (已在 Dockerfile ENTRYPOINT 中配置)
    # ====================================================================================
    environment:
      # 数据库配置
      DATABASE_URL: jdbc:mysql://mysql:3306/${DATABASE_NAME:-woodlin}?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=GMT%2B8&allowPublicKeyRetrieval=true
      DATABASE_USERNAME: ${DATABASE_USERNAME:-woodlin}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-123456}
      DATABASE_DRIVER: com.mysql.cj.jdbc.Driver

      # Redis 配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-123456}
      REDIS_DATABASE: ${REDIS_DATABASE:-0}
      REDIS_TIMEOUT: ${REDIS_TIMEOUT:-10s}
      REDISSON_ADDRESS: redis://redis:6379
      REDISSON_PASSWORD: ${REDIS_PASSWORD:-123456}

      # 服务器配置
      SERVER_PORT: 8080
      SERVER_CONTEXT_PATH: /api

      # Spring 配置
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}

      # 时区和编码
      TZ: Asia/Shanghai
      LANG: zh_CN.UTF-8

    # ====================================================================================
    # 数据卷挂载
    #
    # app_logs: 应用日志目录 (包括应用日志、GC 日志、堆转储等)
    # app_temp: 临时文件目录
    # ====================================================================================
    volumes:
      - app_logs:/app/logs
      - app_temp:/app/temp

    networks:
      - woodlin-network

    # ====================================================================================
    # 健康检查配置
    #
    # 使用 Spring Boot Actuator 的 health 端点进行健康检查
    # start_period 设置为 90 秒，因为 Spring Boot 应用启动较慢
    # ====================================================================================
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

    # ====================================================================================
    # 系统资源限制
    #
    # ulimits: 文件描述符和进程数限制
    #   - nofile: 最大打开文件数
    #     Java 应用需要大量文件描述符 (类文件、socket 连接、日志文件等)
    #   - nproc: 最大进程/线程数
    #     Java 应用会创建大量线程 (Tomcat 线程池、数据库连接池、异步任务等)
    #
    # security_opt: 安全选项
    #   - no-new-privileges:true: 禁止进程获取新权限 (安全加固)
    #
    # 注意: 宿主机也需要配置足够的限制
    #   - 编辑 /etc/security/limits.conf 添加:
    #     * soft nofile 65536
    #     * hard nofile 65536
    #     * soft nproc 65536
    #     * hard nproc 65536
    #   - 编辑 /etc/sysctl.conf 添加:
    #     fs.file-max = 2097152
    #     fs.nr_open = 2097152
    #     net.core.somaxconn = 32768
    #   - 执行 sysctl -p 使配置生效
    # ====================================================================================
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      nproc:
        soft: 65536
        hard: 65536

    # 安全选项
    security_opt:
      - no-new-privileges:true

    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # ====================================================================================
  # Nginx 前端服务 (可选)
  #
  # 用途: 提供前端静态资源服务
  # 说明: 使用 profiles 控制，只在需要时启动
  #       启动命令: docker-compose --profile frontend up -d
  # ====================================================================================
  nginx:
    image: nginx:alpine
    container_name: woodlin-nginx
    restart: unless-stopped

    ports:
      - "${NGINX_PORT:-3000}:80"

    # ====================================================================================
    # 数据卷挂载
    #
    # ./web: 前端构建产物目录 (npm run build 生成的 dist 目录)
    # ./nginx.conf: Nginx 配置文件 (只读)
    # nginx_cache: Nginx 缓存目录
    # ====================================================================================
    volumes:
      - ./web:/usr/share/nginx/html:ro
      - ./scripts/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_cache:/var/cache/nginx

    networks:
      - woodlin-network

    depends_on:
      - woodlin-app

    # ====================================================================================
    # Profiles 配置
    #
    # 只在指定 profile 时启动此服务
    # 使用方法: docker-compose --profile frontend up -d
    # ====================================================================================
    profiles:
      - frontend

    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

# ====================================================================================
# 数据卷定义
#
# 用途: 持久化存储容器数据，即使容器删除数据也不会丢失
#
# mysql_data: MySQL 数据库文件
# redis_data: Redis 持久化数据 (AOF/RDB)
# app_logs: 应用日志 (应用日志、GC 日志、堆转储等)
# app_temp: 应用临时文件
# nginx_cache: Nginx 缓存文件
#
# 管理命令:
#   - 查看所有卷: docker volume ls
#   - 查看卷详情: docker volume inspect <volume_name>
#   - 删除卷: docker volume rm <volume_name>
#   - 清理未使用的卷: docker volume prune
#
# 备份数据卷:
#   docker run --rm -v woodlin_mysql_data:/data -v $(pwd):/backup \
#     alpine tar czf /backup/mysql_backup.tar.gz -C /data .
#
# 恢复数据卷:
#   docker run --rm -v woodlin_mysql_data:/data -v $(pwd):/backup \
#     alpine tar xzf /backup/mysql_backup.tar.gz -C /data
# ====================================================================================
volumes:
  mysql_data:
    driver: local
    # driver_opts:
    #   type: none
    #   o: bind
    #   device: /data/woodlin/mysql

  redis_data:
    driver: local
    # driver_opts:
    #   type: none
    #   o: bind
    #   device: /data/woodlin/redis

  app_logs:
    driver: local
    # driver_opts:
    #   type: none
    #   o: bind
    #   device: /data/woodlin/logs

  app_temp:
    driver: local

  nginx_cache:
    driver: local

# ====================================================================================
# 网络定义
#
# woodlin-network: 桥接网络，连接所有服务
#
# 网络特性:
#   - 服务间可以通过服务名互相访问 (如: mysql, redis, woodlin-app)
#   - 自动进行 DNS 解析
#   - 与宿主机网络隔离，提高安全性
#
# 管理命令:
#   - 查看网络: docker network ls
#   - 查看网络详情: docker network inspect woodlin_woodlin-network
#   - 查看连接的容器: docker network inspect --format='{{range .Containers}}{{.Name}} {{end}}' woodlin_woodlin-network
# ====================================================================================
networks:
  woodlin-network:
    driver: bridge
    # 网络配置 (可选)
    # ipam:
    #   driver: default
    #   config:
    #     - subnet: 172.28.0.0/16
    #       gateway: 172.28.0.1
